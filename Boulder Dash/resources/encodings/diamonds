#maxint=4111.


distance(D, X,Y) :-player(A,S), diamond(X,Y), A>=X, S>=Y, Q=A-X, W=S-Y, D=Q+W.
distance(D, X,Y) :-player(A,S), diamond(X,Y), A<X, S<Y, Q=X-A, W=Y-S, D=Q+W.
distance(D, X,Y) :-player(A,S), diamond(X,Y), A>=X, S<Y, Q=A-X, W=Y-S, D=Q+W.
distance(D, X,Y) :-player(A,S), diamond(X,Y), A<X, S>=Y, Q=X-A, W=S-Y, D=Q+W.

mindist(M) :- #min{D: distance(D,A,S), not aggira(A,S), not player(A,S)}= M.
closer(X,Y) :-  distance(M, X,Y), mindist(M), not aggira(X,Y).

%vede le parti di muri continui che devono essere aggirati
blockedPassage(X,Y) :- wall(X,Y), wall(X,Z), Z=Y+1, X>0, X<21, Y>0, Y<39.
blockedPassage(X,Y) :- blockedPassage(X,Z), wall(X,Y), Y=Z+1.

blockedPassageVERT(X,Y) :- wall(X,Y), wall(Z,Y), Z=X+1, X>0, X<21, Y>0, Y<39.
blockedPassageVERT(X,Y) :- blockedPassageVERT(Z,Y), wall(X,Y), X=Z+1.

firstUP(X,Y) :- blockedPassageVERT(X,Y), not blockedPassageVERT(Z,Y), Z=X-1.
lastDO(X,Y) :- blockedPassageVERT(X,Y), not blockedPassageVERT(Z,Y), Z=X+1.
intervalVERT(F,L) :- firstUP(F,Y), lastDO(L,Y).

%vede se per arrivare al diamante deve aggirare
aggira(X,Y) :- wallBetween(X,Y).
wallBetween(X,Y) :- player(A,S), diamond(X,Y), interval(MIN,MAX), MIN!=MAX, S>=MIN, S<=MAX,  blockedPassage(L,MIN), A<L, X>L.
wallBetween(X,Y) :- player(A,S), diamond(X,Y), interval(MIN,MAX), MIN!=MAX, S>=MIN, S<=MAX,  blockedPassage(L,MIN), X<L, A>L.  
wallBetween(X,Y) :- player(A,S), diamond(X,Y), interval(MIN,MAX), MIN!=MAX, Y>=MIN, Y<=MAX,  blockedPassage(L,MIN), A<L, X>L.
wallBetween(X,Y) :- player(A,S), diamond(X,Y), interval(MIN,MAX), MIN!=MAX, Y>=MIN, Y<=MAX,  blockedPassage(L,MIN), X<L, A>L.  


wallBetween(X,Y) :- player(A,S), diamond(X,Y), intervalVERT(MIN,MAX), MIN!=MAX, A>=MIN, A<=MAX,  blockedPassageVERT(MIN,L), S<L, Y>L.
wallBetween(X,Y) :- player(A,S), diamond(X,Y), intervalVERT(MIN,MAX), MIN!=MAX, A>=MIN, A<=MAX,  blockedPassageVERT(MIN,L), Y<L, S>L.  
wallBetween(X,Y) :- player(A,S), diamond(X,Y), intervalVERT(MIN,MAX), MIN!=MAX, X>=MIN, X<=MAX,  blockedPassageVERT(MIN,L), S<L, Y>L.
wallBetween(X,Y) :- player(A,S), diamond(X,Y), intervalVERT(MIN,MAX), MIN!=MAX, X>=MIN, X<=MAX,  blockedPassageVERT(MIN,L), Y<L, S>L. 

                 
first(X,Y) :- blockedPassage(X,Y), not blockedPassage(X,Z), Z=Y-1.
last(X,Y) :- blockedPassage(X,Y), not blockedPassage(X,Z), Z=Y+1.
interval(F,L) :- first(X,F), last(X,L).

edge(X,Z) :- blockedPassage(X,Y), last(X,Y), Z=Y+1, Z<40.
edge(X,Z) :- blockedPassage(X,Y), first(X,Y), Z=Y-1, Z>0.

edge(Z,Y) :- blockedPassageVERT(X,Y), lastDO(X,Y), Z=X+1, Z<21.
edge(Z,Y) :- blockedPassageVERT(X,Y), firstUP(X,Y), Z=X-1, Z>0.

distanceEdge(D, X,Y) :-player(A,S), edge(X,Y), A>=X, S>=Y, Q=A-X, W=S-Y, D=Q+W.
distanceEdge(D, X,Y) :-player(A,S), edge(X,Y), A<X, S<Y, Q=X-A, W=Y-S, D=Q+W.
distanceEdge(D, X,Y) :-player(A,S), edge(X,Y), A>=X, S<Y, Q=A-X, W=Y-S, D=Q+W.
distanceEdge(D, X,Y) :-player(A,S), edge(X,Y), A<X, S>=Y, Q=X-A, W=S-Y, D=Q+W.

mindistEdge(M) :- #min{D: distanceEdge(D,A,S), not player(A,S), not prec(A,S)}= M.

closer(X,Y) :- #count{D: mindist(D)}=0, mindistEdge(M), distanceEdge(M,X,Y).